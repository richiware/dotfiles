#!/usr/bin/env bash
# fzf-ueberzogen.sh is a wrapper script which allows to use ueberzug with fzf.
# Copyright (C) 2019  Nico Baeurer

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
readonly BASH_BINARY="$(which bash)"
#readonly REDRAW_COMMAND="toggle-preview+toggle-preview"
#readonly REDRAW_KEY="Âµ"
declare -r -x DEFAULT_PREVIEW_POSITION="right"
declare -r -x UEBERZUG_FIFO="$(mktemp --dry-run --suffix "fzf-$$-ueberzug")"
declare -r -x PREVIEW_ID="preview"

function STORE_TERMINAL_SIZE_IN {
    # Usage: STORE_TERMINAL_SIZE_IN 
    #           lines_variable columns_variable
    [[ ! -v "$1" || ! -v "$2" ]] && return 1
    < <(</dev/tty stty size) \
        read "$1" "$2"
}

function CLEAR_PREVIEW {
    # Usage: CLEAR_PREVIEW
    REMOVE_PLACEMENT "${PREVIEW_ID}"
}


function REMOVE_PLACEMENT {
    # Usage: REMOVE_PLACEMENT placement-id
    [[ $# -ne 1 ]] && return 1
    >"${UEBERZUG_FIFO}" \
        declare -A -p _remove_command=( \
        [action]=remove [identifier]="${1}")
}


function is_option_key [[ "${@}" =~ ^(\-.*|\+.*) ]]
function is_key_value [[ "${@}" == *=* ]]


function store_options_map_in {
    # Usage: store_options_map_in
    #           options_map_variable options_variable
    # references can't be checked.. -v doesn't seem to support associative arrays..
    [[ $# -ne 2 || ! -v "$2" ]] && return 1
    local -n _options_map="${1}"
    local -n _options="${2}"

    for ((i=0; i < ${#_options[@]}; i++)); do
        local key="${_options[$i]}" next_key="${_options[$((i + 1))]:---}"
        local value=true
        is_option_key "${key}" || \
            continue
        if is_key_value "${key}"; then
            <<<"${key}" \
                IFS='=' read key value
        elif ! is_option_key "${next_key}"; then
            value="${next_key}"
        fi
        _options_map["${key}"]="${value}"
    done
}


function process_options {
    # Usage: process_options command-line-arguments
    local -a "default_options=(${FZF_DEFAULT_OPTS})"
    local -a script_options=("${@}")
    local -A mapped_options
    store_options_map_in mapped_options default_options
    store_options_map_in mapped_options script_options 

    declare -g -r -x PREVIEW_POSITION="${mapped_options[--preview-window]%%:[^:]*}"
    declare -g -r -x FZF_HEIGHT="${mapped_options[--height]:-100%}"
    declare -g -r -x FZF_MIN_HEIGHT="${mapped_options[--min-height]:-10}"
}


function store_cursor_position_in {
    # Usage: store_cursor_pos_in
    #           y_variable x_variable
    # based on https://github.com/dylanaraps/pure-bash-bible#get-the-current-cursor-position
    [[ ! -v "$1" || ! -v "$2" ]] && return 1
    </dev/tty &>/dev/tty \
        IFS='[;' \
        read -p $'\e[6n' -d R -rs _ "${1}" "${2}" _
}


function start_ueberzug {
    # Usage: start_ueberzug
    mkfifo "${UEBERZUG_FIFO}"
    <"${UEBERZUG_FIFO}" \
        ueberzug layer --parser bash --silent &
    # prevent EOF
    3>"${UEBERZUG_FIFO}" \
        exec
}


function finalise {
    CLEAR_PREVIEW
    # Usage: finalise
    3>&- \
        exec
    &>/dev/null \
        rm "${UEBERZUG_FIFO}"
    if [ -n "$ZSH_VERSION" ]; then
        &>/dev/null \
            kill $(jobs -p | awk '/^\[/{print $3}')
    else
        &>/dev/null \
            kill $(jobs -p)
    fi
}


#function print_on_winch {
#    # Usage: print_on_winch text
#    # print "$@" to stdin on receiving SIGWINCH
#    # use exec as we will only kill direct childs on exiting,
#    # also the additional bash process isn't needed
#    </dev/tty \
#        exec perl -e '
#            require "sys/ioctl.ph";
#            while (1) {
#                local $SIG{WINCH} = sub {
#                    ioctl(STDIN, &TIOCSTI, $_) for split "", join " ", @ARGV;
#                };
#                sleep;
#            }' \
#            "${@}" &
#}

function is_inside_tmux() {
    if [ -z "$AVOID_TMUX" ] && [ -n "$TMUX_PANE" ] && [ "${FZF_TMUX:-0}" != 0 ] && [ ${LINES:-40} -gt ${FZF_MIN_HEIGHT} ]; then
        USE_FZF_TMUX=1
        declare -g -r -x FZF_START_OFFSET_Y="$(tmux display-message -p '#{pane_top}')"
    else
        local cursor_y= cursor_x=
        store_cursor_position_in cursor_y cursor_x
        # If fzf is used as completion tool we will get the position of the prompt.
        # If it's normally used we get the position the output will be displayed at.
        # If it's normally used we need to subtract one to get the position of the prompt.
        ((cursor_y=cursor_x != 1 ? cursor_y : cursor_y - 1))
        declare -g -r -x FZF_START_OFFSET_Y="${cursor_y}"
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    trap finalise EXIT
    process_options "${@}"
    # print the redraw key twice as there's a run condition we can't circumvent
    # (we can't know the time fzf finished redrawing it's layout)
    #print_on_winch "${REDRAW_KEY}${REDRAW_KEY}"
    is_inside_tmux
    start_ueberzug

    if [[ $USE_FZF_TMUX == 1 ]]; then
        result=$(
        SHELL="${BASH_BINARY}" \
            fzf-tmux --preview \
                "fzf-tmux-preview \
                    ${UEBERZUG_FIFO} \
                    ${PREVIEW_POSITION:-${DEFAULT_PREVIEW_POSITION}} \
                    ${FZF_MIN_HEIGHT} \
                    ${FZF_START_OFFSET_Y} \
                    {}" \
                --preview-window "${DEFAULT_PREVIEW_POSITION}" \
                "${@}"
            )
    else
        result=$(
        SHELL="${BASH_BINARY}" \
            fzf --preview \
                "fzf-tmux-preview \
                    ${UEBERZUG_FIFO} \
                    ${PREVIEW_POSITION:-${DEFAULT_PREVIEW_POSITION}} \
                    ${FZF_MIN_HEIGHT} \
                    ${FZF_START_OFFSET_Y} \
                    {}" \
                --preview-window "${DEFAULT_PREVIEW_POSITION}" \
                "${@}"
            )
    fi

    CLEAR_PREVIEW

    if [[ -z "$AVOID_REPLACE" ]]; then
        echo ${result// /\\ }
    else
        echo ${result}
    fi
fi

# --bind "${REDRAW_KEY}:${REDRAW_COMMAND}" \
